My understanding of AES-256 is for encryption:
- You need a 32 byte key
- A nonce: a number (not a secret) that must never repeat when using the same key. Without it, encrypting the same plaintext and same cipher/key would always produce the same ciphertext which is not what we want.


in the request body they'll only send the key and link they want to encrypt. to decrypt, they'll send an encrypted text, and a key. 
use hashed key to look up, that way hopefully there's no duplictes.
trying to do this where the user has to do as little as possible.


DynamoDB Local: Stores data in a custom format inside a directory (-dbPath) but does not support importing .json or .rdb files directly at startup. It expects you to seed via API calls (e.g., AWS CLI or SDK).

https://docs.aws.amazon.com/sdk-for-rust/latest/dg/hello.html

#!/bin/bash
aws dynamodb create-table \
  --table-name Products \
  --attribute-definitions AttributeName=id,AttributeType=S \
  --key-schema AttributeName=id,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST \
  --endpoint-url http://localhost:8000

aws dynamodb put-item \
  --table-name Products \
  --item '{"id": {"S": "product1"}, "name": {"S": "Laptop Pro 15"}, "price": {"N": "1000"}}' \
  --endpoint-url http://localhost:8000


{
  "hashed_key": "/N4rLtula/QIYB+3If6bXDONEO5CnqBPrlURto+/j7k=",
  "nonce": "CQ6WB09TCRvfHEaY",
  "cipher_text": "5oLTSyu9MStz5iXAH6z+kZu9+g=="
}
{
  "hashed_key": "nQ+/k0n2RvFDUHLysCEghHUu9GAb1rAS+75htsXgOTA=",
  "nonce": "djX4YmXpsLVA2DRF",
  "cipher_text": "eOUEtysLu7K37h3Wevo7R7kePw=="
}